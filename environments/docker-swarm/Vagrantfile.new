# -*- mode: ruby -*-
# vi: set ft=ruby :

servers = [
    {
        :name => "swarm-3",
        :type => "master",
        :box => "bento/ubuntu-18.04",
        :eth1 => "10.11.1.73",
        :port => "8083",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "swarm-2",
        :type => "node",
        :box => "bento/ubuntu-18.04",
        :eth1 => "10.11.1.72",
        :port => "8082",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "swarm-1",
        :type => "node",
        :box => "bento/ubuntu-18.04",
        :eth1 => "10.11.1.71",
        :port => "8081",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "dev",
        :type => "dev",
        :box => "bento/ubuntu-18.04",
        :eth1 => "10.11.1.81",
        :port => "8089",
        :mem => "1024",
        :cpu => "2"
    }
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT
    # install kubeadm
    apt-get install -y apt-transport-https curl
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
    deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
    apt-get update
    apt-get install -y kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl
    # kubelet requires swap off
    swapoff -a
    # keep swap off after reboot
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    # ip of this box
    IP_ADDR=`ifconfig eth1 | grep inet | awk '{print $2}'| cut -f2 -d:`
    # set node-ip
    # sed -i '/^ExecStart=.*/i Environment="KUBELET_EXTRA_ARGS="' etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    # sed -i '0,/ExecStart=/s//Environment="KUBELET_EXTRA_ARGS=--cgroup-driver=cgroupfs"\\n&/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    if [[ ! -e /etc/default/kubelet ]]; then
        touch /etc/default/kubelet
    fi
    echo -e "KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR --cgroup-driver=cgroupfs" >> /etc/default/kubelet
    # sudo sed -i "/^[^#]*KUBELET_EXTRA_ARGS=/c\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR --cgroup-driver=cgroupfs" /etc/default/kubelet
    sudo systemctl restart kubelet
SCRIPT

$configureMaster = <<-SCRIPT
    echo "This is master"
    # ip of this box
    IP_ADDR=`ifconfig eth1 | grep inet | awk '{print $2}'| cut -f2 -d:`
    # install k8s master
    HOST_NAME=$(hostname -s)
    kubeadm init --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=192.168.0.0/16
    #copying credentials to regular user - vagrant
    sudo --user=vagrant mkdir -p /home/vagrant/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config
    # install Calico pod network addon
    export KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
    kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
    chmod +x /etc/kubeadm_join_cmd.sh
    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart
    cp /etc/kubernetes/kubelet.conf /home/vagrant/kubelet.conf
    chown vagrant:vagrant /home/vagrant/kubelet.conf
SCRIPT

$configureNode = <<-SCRIPT
    echo "This is worker"
    apt-get install -y sshpass
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@10.11.1.73:/etc/kubeadm_join_cmd.sh .
    sh ./kubeadm_join_cmd.sh
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@10.11.1.73:/home/vagrant/kubelet.conf .
    chown vagrant:vagrant /home/vagrant/kubelet.conf
SCRIPT

$configureDev = <<-SCRIPT
    echo "This is dev"
    apt-get install -y sshpass
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@10.11.1.73:/home/vagrant/kubelet.conf .
SCRIPT

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # Configurazioni comuni.

    # Ubuntu 18.04 LTS 64 bit VirtualBox (Bento)
    config.vm.box = $image_version
    # config.vm.box_url = "https://app.vagrantup.com/bento/boxes/ubuntu-18.04"

    # folder per i progetti Asw (/home/asw/projects)
    config.vm.synced_folder "../../projects/", "/home/asw/projects", :mount_options => ["dmode=777", "fmode=777"]

    # folder per le risorse condivise per gli ambienti Asw (/home/asw/_shared/resources e /home/asw/_shared/scripts) 
    config.vm.synced_folder "../_shared/", "/home/asw/_shared", :mount_options => ["dmode=777", "fmode=777"]

    # folder per i dati condivisi per gli ambienti Asw (/home/asw/data) 
	# usato per un volume per il registry swarm 
    config.vm.synced_folder "../../data/", "/home/asw/data", :mount_options => ["dmode=777", "fmode=777"]

    servers.each do |opts|
        config.vm.define opts[:name] do |config|

            config.vm.box = opts[:box]
            # config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
            config.vm.network :private_network, ip: opts[:eth1], virtualbox__intnet: true

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

            end

            config.vm.network "forwarded_port", guest: 22, host: 2211, id: 'ssh', auto_correct: true
            config.ssh.forward_agent = true
            
            config.vm.network "forwarded_port", guest: 8080, host: opts[:port], id: 'http', auto_correct: true

            config.vm.provision :shell, path: "../_shared/scripts/set-env-variables.sh", args: ["10.11.1.70", "my-registry", "my-swarm", "swarm-", 3]

            
            if opts[:type] == "master"
                 # questi devono essere avviati soltanto dal primo nodo
                 config.vm.provision :shell, path: "../_shared/scripts/crea-certificati-per-lo-swarm.sh"
                 config.vm.provision :shell, path: "../_shared/scripts/crea-certificati-per-il-registry.sh"
            end

            config.vm.provision :shell, path: "../_shared/scripts/copy-ssl-client-data.sh"

            if opts[:type] != "dev"
                config.vm.provision :shell, path: "../_shared/scripts/copy-ssl-registry-data.sh"
                config.vm.provision :shell, path: "../_shared/scripts/ssl-override.sh"
            else
                config.vm.provision :shell, path: "../_shared/scripts/setup-java.sh"
                config.vm.provision :shell, path: "../_shared/scripts/setup-gradle.sh"
                config.vm.provision :shell, path: "../_shared/scripts/setup-maven.sh"

                config.vm.provision :shell, path: "../_shared/scripts/standard-override.sh"
                config.vm.provision :shell, :inline => 'ln -s /home/asw/projects projects'
            end

            config.vm.provision :shell, path: "../_shared/scripts/setup-docker.sh"
            config.vm.provision :shell, path: "../_shared/scripts/setup-docker-compose.sh"
            config.vm.provision :shell, path: "../_shared/scripts/setup-swarm-hosts.sh"

            if opts[:type] == "dev"
                # config.vm.provision :shell, path: "../_shared/scripts/dev-registry-login.sh"
            end
                
            config.vm.provision "shell", inline: $configureBox

            if opts[:type] == "master"
                config.vm.provision "shell", inline: $configureMaster

            elsif opts[:type] == "dev"
                config.vm.provision "shell", inline: $configureDev
            else
                config.vm.provision "shell", inline: $configureNode
            end

        end

    end

end 